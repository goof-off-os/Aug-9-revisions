"""
DFARS Markdown Renderers
========================

Drop-in module for the unified Report Generation Engine (RGE).
Provides two Markdown renderers and a small registration helper:
  - DFARS_CHECKLIST  (DFARS 252.215-7009 Proposal Adequacy Checklist)
  - DFARS_COVER_PAGE (SF1411-equivalent cost volume cover sheet)

Usage (inside your RGE startup / template bootstrap):

    from render.md import dfars_templates
    dfars_templates.register(TEMPLATE_REGISTRY)

Both renderers accept a permissive `payload` (your Unified Payload pydantic model
or a plain dict) and an optional `kb` object (dict with `.get('facts', [])`).
They only rely on a few common fields and will fail-soft to sensible placeholders
if fields are missing, so you can wire them up immediately and improve mapping later.
"""
from __future__ import annotations
from typing import Any, Dict, List, Callable
from datetime import datetime

Renderer = Callable[[Dict[str, Any] | Any, Dict[str, Any] | None], str]

# ----------------------------- helpers -----------------------------

def _get(d: Dict[str, Any] | Any, *path: str, default: str = "") -> str:
    """Safe dotted lookup supporting both dicts and pydantic models."""
    cur: Any = d
    for key in path:
        if cur is None:
            return default
        if hasattr(cur, key):
            cur = getattr(cur, key)
        else:
            try:
                cur = cur.get(key)
            except Exception:
                return default
    return cur if isinstance(cur, (str, int, float)) else (default if cur is None else str(cur))


def _utcnow_iso() -> str:
    return datetime.utcnow().isoformat() + "Z"


def _kb_has(data: Dict[str, Any] | None, element: str) -> bool:
    if not data:
        return False
    facts = data.get("facts", [])
    return any((f.get("element", "").lower() == element.lower()) for f in facts)


# ----------------------------- CHECKLIST -----------------------------

_CHECKLIST_HEADER = """# DFARS 252.215-7009 Proposal Adequacy Checklist
**Program:** {program}  
**Contract Type:** {contract_type}  
**Prime or Sub:** {prime_or_sub}  
**Solicitation:** {solicitation}  
**Generated:** {generated_at}  

> Note: This checklist is auto-generated by ProposalOS from the Unified Payload.\
> Provide locations or explanations where indicated. Attach additional pages as needed.
"""

_CHECKLIST_TABLE_PREAMBLE = """
## Checklist Items

| Item | References | Submission Item | Location / Explanation |
|------|------------|-----------------|------------------------|
"""

# A compact starter set (you can extend to the full 60+ items later).
_CHECKLIST_ROWS: List[Dict[str, str]] = [
    {
        "item": "1",
        "refs": "FAR 15.408 Table 15-2 (Gen. Instr.)",
        "text": "Table of contents maps all required topics (incl. First Article, Line Item Summaries, Other Info, Index).",
        "placeholder_key": "toc_location",
    },
    {
        "item": "2",
        "refs": "FAR 15.408 Table 15-2 A(1)",
        "text": "Proposal is an adequate response to the RFP (addresses all sections).",
        "placeholder_key": "adequacy_statement",
    },
    {
        "item": "3",
        "refs": "DFARS 252.215-7009(c)(1)",
        "text": "Certified cost or pricing data threshold considered and addressed (if applicable).",
        "placeholder_key": "ccpd_statement",
    },
    {
        "item": "4",
        "refs": "FAR 31.205-46; DFARS 231.205-46",
        "text": "Travel cost methodology provided and GSA per diem compliance addressed.",
        "placeholder_key": "travel_method_location",
    },
    {
        "item": "5",
        "refs": "CAS 410; FAR 31.203",
        "text": "Indirects (Overhead, G&A, Fringe) bases and pools reconciled to accounting practices.",
        "placeholder_key": "indirects_basis_location",
    },
    {
        "item": "6",
        "refs": "FAR 15.404-1; Weighted Guidelines",
        "text": "Profit/Fee rationale provided consistent with contract type.",
        "placeholder_key": "fee_rationale_location",
    },
]


def _derive_checklist_placeholders(payload: Dict[str, Any] | Any, kb: Dict[str, Any] | None) -> Dict[str, str]:
    """Produce best-effort placeholder values from payload/kb."""
    ph: Dict[str, str] = {}
    # Simple heuristics — wire to your fields as your model firms up
    ph["toc_location"] = _get(payload, "documents", "toc", default="TBD")
    ph["adequacy_statement"] = _get(payload, "proposal", "adequacy", default="Yes — see Volume I")
    # CCPD threshold signal
    ph["ccpd_statement"] = _get(payload, "pricing", "ccpd_applicability", default="Not required / under threshold")

    # If KB shows Travel element, point to the BOE section; else TBD
    ph["travel_method_location"] = (
        _get(payload, "volumes", "cost_volume", "sections", "travel", default="TBD")
        if _kb_has(kb, "Travel")
        else "TBD"
    )

    ph["indirects_basis_location"] = _get(payload, "rates", "indirects_basis", default="TBD — see Rate Build-Up")
    ph["fee_rationale_location"] = _get(payload, "pricing", "fee_justification", default="TBD — Weighted Guidelines appendix")
    return ph


def render_dfars_checklist(payload: Dict[str, Any] | Any, kb: Dict[str, Any] | None = None) -> str:
    program = _get(payload, "program", "name", default=_get(payload, "program_name", default="Program X"))
    contract_type = _get(payload, "contract", "type", default="TBD")
    prime_or_sub = _get(payload, "contract", "role", default="Prime")
    solicitation = _get(payload, "rfp", "solicitation_number", default=_get(payload, "solicitation", default="TBD"))

    header = _CHECKLIST_HEADER.format(
        program=program,
        contract_type=contract_type,
        prime_or_sub=prime_or_sub,
        solicitation=solicitation,
        generated_at=_utcnow_iso(),
    )

    ph = _derive_checklist_placeholders(payload, kb)

    lines = [header, _CHECKLIST_TABLE_PREAMBLE]
    for row in _CHECKLIST_ROWS:
        val = ph.get(row["placeholder_key"], "TBD") or "TBD"
        lines.append(f"| {row['item']} | {row['refs']} | {row['text']} | {val} |")

    lines.append("\n_This is a starter set. Extend to the full checklist by adding rows in `_CHECKLIST_ROWS` or mapping from KB facts._\n")
    return "\n".join(lines)


# ----------------------------- COVER PAGE -----------------------------

_COVER_PAGE = """# Contract Pricing Proposal Cover Sheet (SF 1411 Equivalent)
**Program:** {program}  
**Generated:** {generated_at}  

1. **Solicitation/Contract/Modification Number:** {solicitation}  
2. **Name of Offeror:** {offeror_name}  
   a. First Line Address: {addr1}  
   b. Street Address: {addr2}  
   c. City: {city}  
   d. State: {state}  
   e. Zip Code: {zip}  
3. **Offeror POC:** {poc_name}  
   a. Title: {poc_title}  
   b. Phone: {poc_phone}  
   c. Email: {poc_email}  
4. **Type of Contract Action:** {contract_action}  
5. **Contract Type:** {contract_type}  
6. **Place(s) of Performance:** {performance_places}  
7. **Period of Performance:** {pop_start} to {pop_end}  
8. **Summary of Costs:**  
   - Direct Labor: {sum_direct_labor}  
   - Subcontracts: {sum_subcontracts}  
   - Materials/Others: {sum_materials}  
   - Indirects (OH/G&A/Fringe): {sum_indirects}  
   - Travel: {sum_travel}  
   - Fee/Profit: {sum_fee}  
   - **Total Proposed Price:** {sum_total}  

> Provide detailed cost build-ups in the Cost Volume. Values shown are placeholders unless mapped in the Unified Payload aggregator.
"""


def render_dfars_cover_page(payload: Dict[str, Any] | Any, kb: Dict[str, Any] | None = None) -> str:
    program = _get(payload, "program", "name", default=_get(payload, "program_name", default="Program X"))
    org = _get(payload, "organization", "name", default=_get(payload, "offeror", default="Your Company, Inc."))

    # Addresses / POC — fail-soft placeholders
    addr1 = _get(payload, "organization", "address1", default="")
    addr2 = _get(payload, "organization", "address2", default="")
    city = _get(payload, "organization", "city", default="")
    state = _get(payload, "organization", "state", default="")
    zipc = _get(payload, "organization", "zip", default="")

    poc_name = _get(payload, "contacts", "poc", "name", default="TBD")
    poc_title = _get(payload, "contacts", "poc", "title", default="TBD")
    poc_phone = _get(payload, "contacts", "poc", "phone", default="TBD")
    poc_email = _get(payload, "contacts", "poc", "email", default="TBD")

    solicitation = _get(payload, "rfp", "solicitation_number", default=_get(payload, "solicitation", default="TBD"))
    contract_type = _get(payload, "contract", "type", default="TBD")
    contract_action = _get(payload, "contract", "action", default="NEW CONTRACT")

    pop_start = _get(payload, "pop", "start", default="TBD")
    pop_end = _get(payload, "pop", "end", default="TBD")
    performance_places = _get(payload, "performance", "places", default="TBD")

    # Totals — try to read, else placeholders
    totals = {
        "sum_direct_labor": _get(payload, "totals", "direct_labor", default="$TBD"),
        "sum_subcontracts": _get(payload, "totals", "subcontracts", default="$TBD"),
        "sum_materials": _get(payload, "totals", "materials", default="$TBD"),
        "sum_indirects": _get(payload, "totals", "indirects", default="$TBD"),
        "sum_travel": _get(payload, "totals", "travel", default="$TBD"),
        "sum_fee": _get(payload, "totals", "fee", default="$TBD"),
        "sum_total": _get(payload, "totals", "price_total", default="$TBD"),
    }

    return _COVER_PAGE.format(
        program=program,
        generated_at=_utcnow_iso(),
        solicitation=solicitation,
        offeror_name=org,
        addr1=addr1,
        addr2=addr2,
        city=city,
        state=state,
        zip=zipc,
        poc_name=poc_name,
        poc_title=poc_title,
        poc_phone=poc_phone,
        poc_email=poc_email,
        contract_action=contract_action,
        contract_type=contract_type,
        performance_places=performance_places,
        pop_start=pop_start,
        pop_end=pop_end,
        **totals,
    )


# ----------------------------- registry glue -----------------------------

TEMPLATE_KEYS = {
    "DFARS_CHECKLIST": "DFARS 252.215-7009 Proposal Adequacy Checklist",
    "DFARS_COVER_PAGE": "DFARS Cost Volume Cover Page (SF1411 Eq.)",
}


def register(registry: Dict[str, Dict[str, Any]] | Any) -> None:
    """
    Idempotently register DFARS templates into your engine's registry.

    Expected registry shape (flexible):
        registry[template_key] = {
            "title": str,
            "renderer": callable(payload, kb) -> str,
            "category": "DFARS" | "ANNUAL_FY" | ...,
            "content_type": "text/markdown",
        }
    """
    def _put(key: str, title: str, fn: Renderer):
        entry = {
            "title": title,
            "renderer": fn,
            "category": "DFARS",
            "content_type": "text/markdown",
        }
        try:
            # Update-or-set without clobbering unrelated metadata
            cur = registry.get(key) if hasattr(registry, "get") else None
            if isinstance(cur, dict):
                cur.update(entry)
                registry[key] = cur
            else:
                registry[key] = entry
        except Exception:
            # Fallback for exotic registry types
            registry[key] = entry

    _put("DFARS_CHECKLIST", TEMPLATE_KEYS["DFARS_CHECKLIST"], render_dfars_checklist)
    _put("DFARS_COVER_PAGE", TEMPLATE_KEYS["DFARS_COVER_PAGE"], render_dfars_cover_page)


# Optional: quick self-test
if __name__ == "__main__":
    sample_payload = {
        "program": {"name": "ACME SatCom"},
        "rfp": {"solicitation_number": "FA1234-25-R-0001"},
        "contract": {"type": "CPFF", "role": "Prime", "action": "NEW CONTRACT"},
        "organization": {"name": "ACME Aerospace, LLC", "address1": "123 Main St.", "city": "Denver", "state": "CO", "zip": "80202"},
        "contacts": {"poc": {"name": "Jane Smith", "title": "Contracts Manager", "phone": "(303) 555-1212", "email": "jane@acme.com"}},
        "pop": {"start": "2025-10-01", "end": "2030-09-30"},
        "totals": {"direct_labor": "$1,200,000", "subcontracts": "$800,000", "materials": "$250,000", "indirects": "$900,000", "travel": "$75,000", "fee": "$300,000", "price_total": "$3,525,000"},
    }
    sample_kb = {"facts": [{"element": "Travel"}]}

    print("\n=== DFARS CHECKLIST ===\n")
    print(render_dfars_checklist(sample_payload, sample_kb)[:800], "...\n")

    print("\n=== DFARS COVER PAGE ===\n")
    print(render_dfars_cover_page(sample_payload)[:800], "...\n")
